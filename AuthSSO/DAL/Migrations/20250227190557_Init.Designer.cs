// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250227190557_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Model.Entities.Application", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateBreak")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateLastCheck")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Uid = new Guid("f265c353-e68c-463a-9497-1c4d589a9ae5"),
                            Description = "Приложения для списка задач, которые нужно сделать для восстановления Волги",
                            Ip = "10.10.10.10",
                            IsActive = true,
                            IsWork = true,
                            Name = "Volga-Tracker",
                            Port = 10,
                            Version = "v1"
                        });
                });

            modelBuilder.Entity("Model.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.HasIndex("ApplicationUid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApiKeyUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("HashPassword")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveCode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApiKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPass")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserPass")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<Guid?>("RefreshTokenUid")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.HasKey("Uid");

                    b.HasIndex("ApiKeyUid");

                    b.HasIndex("RefreshTokenUid")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Uid = new Guid("157ffc20-068f-4554-95a3-b9299b523bd1"),
                            Code = "000000",
                            DateCreate = new DateTime(2025, 2, 27, 19, 5, 56, 571, DateTimeKind.Utc).AddTicks(2899),
                            FirstName = "Дмитрий",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsActiveCode = false,
                            IsApiKey = false,
                            IsPass = false,
                            IsUserPass = true,
                            LastName = "Патюков",
                            Login = "Totohka",
                            MiddleName = "Анатольевич"
                        },
                        new
                        {
                            Uid = new Guid("1537a523-57dd-446e-875b-38f4b175bc85"),
                            Code = "000000",
                            DateCreate = new DateTime(2025, 2, 27, 19, 5, 56, 571, DateTimeKind.Utc).AddTicks(5628),
                            Email = "test@gmail.com",
                            FirstName = "Эдуард",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsActiveCode = false,
                            IsApiKey = false,
                            IsPass = false,
                            IsUserPass = true,
                            LastName = "Новиков",
                            Login = "Nedoff",
                            MiddleName = "Дмитриевич"
                        },
                        new
                        {
                            Uid = new Guid("30ee8405-0335-458f-8e9a-b60edcf16f52"),
                            Code = "000000",
                            DateCreate = new DateTime(2025, 2, 27, 19, 5, 56, 571, DateTimeKind.Utc).AddTicks(5654),
                            Email = "test2@gmail.com",
                            FirstName = "Степан",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsActiveCode = false,
                            IsApiKey = false,
                            IsPass = false,
                            IsUserPass = true,
                            LastName = "Кондрашов",
                            Login = "Stepan",
                            MiddleName = "Андреевич"
                        },
                        new
                        {
                            Uid = new Guid("60ae897d-7e13-4180-ad24-86276d1489a2"),
                            Code = "000000",
                            DateCreate = new DateTime(2025, 2, 27, 19, 5, 56, 571, DateTimeKind.Utc).AddTicks(5660),
                            Email = "test3@gmail.com",
                            FirstName = "Кирилл",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsActiveCode = false,
                            IsApiKey = false,
                            IsPass = false,
                            IsUserPass = true,
                            LastName = "Шилов",
                            Login = "Kirill",
                            MiddleName = "Александрович"
                        });
                });

            modelBuilder.Entity("Model.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("RoleUid");

                    b.HasIndex("UserUid");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Model.Entities.WhiteIp", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKeyUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Uid");

                    b.HasIndex("ApiKeyUid");

                    b.ToTable("WhiteIps");
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.HasOne("Model.Entities.Application", "Application")
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.HasOne("Model.Entities.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyUid");

                    b.HasOne("Model.Entities.RefreshToken", "RefreshToken")
                        .WithOne("User")
                        .HasForeignKey("Model.Entities.User", "RefreshTokenUid");

                    b.Navigation("ApiKey");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Model.Entities.UserRole", b =>
                {
                    b.HasOne("Model.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.WhiteIp", b =>
                {
                    b.HasOne("Model.Entities.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("Model.Entities.Application", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Model.Entities.RefreshToken", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
